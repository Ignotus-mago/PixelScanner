package net.paulhertz.scanner;

import java.util.ArrayList;
import java.util.Arrays;

public abstract class PixelMapGen {
	private int w;
	private int h;
	private int len;
	int[] pixelMap;
	int[] sampleMap;
	ArrayList<int[]> coords;
	public final static String description = "Declare the same variable in yhour class and describe your PixelMapGen here.";

	
	
	/**
	 * Constructor for classes that extend PixelMapGen. YOu will need to create you own constructor
	 * for your class, but it can just call super(width, height) if everything it does can be handled
	 * in your generate() method. Note that generate() is call on the last line of this constructor, 
	 * so if you need additional initializations or arguments for your class....
	 * 
	 * @param width
	 * @param height
	 */
	public PixelMapGen(int width, int height) {
		// TODO throw an exception instead? This is not the usual way of handling errors in Processing.
		if (!validate(w,h)) {
			System.out.println("Error: Validation failed");
			return;
		}
		this.w = width;
		this.h = height;
		this.len = h * w;
		this.generate();
	}
	
	/* ---------------- USER MUST SUPPLY THESE METHODS ---------------- */
	/* describe(), validate(width, height), generate() */
	
	
	/**
	 * @return 	A String describing the mapping generated by your class and any initialization requirements. 
	 */
	public abstract String describe();

	
	/**
	 * @param 	width
	 * @param 	height
	 * @return	true if the width and height parameters are valid for creating a mapping with this generator, 
	 * 			otherwise, false.
	 */
	public abstract boolean validate(int width, int height);

	/**
	 * Initialization method for coordinates (this.coords), signalToImageLUT (this.pixelMap), and 
	 * imageToSignalLUT (this.sampleMap) used by PixelAudioMapper classes.
	 * You must initialize this.coords, this.pixelMap, and this.sampleMap within generate() 
	 * or other methods that it calls: See DiagonalZigzagGen for an example. 
	 * @return  this.pixelMap, the value for PixelAudioMapper.signalToImageLUT. 
	 */
	public abstract int[] generate();
	
		
	/* ------------------------------ GETTERS AND NO SETTERS ------------------------------ */
	/* For the most part, we don't want to alter variables once they have been initialized. */

	
	
	/**
	 * @return 	Width of the bitmap associated with this PixelMapGen. 
	 */
	public int getWidth() {
		return w;
	}

	/**
	 * @return 	Height of the bitmap associated with this PixelMapGen. 
	 */
	public int getHeight() {
		return h;
	}
	
	/**
	 * @return 	Size (width * height) of the bitmap associated with this PixelMapGen. 
	 */
	public int getSize() {
		return len;
	}
	
	/**
	 * @return	pixelMap value created by the generate() method.  
	 */
	public int[] getPixelMap() {
		return this.pixelMap;
	}
	
	public int[] getPixelMapCopy() {
		return Arrays.copyOf(pixelMap, len);
	}
	
	public int[] getSampleMap() {
		return this.sampleMap;
	}
	
	public int[] getSampleMapCopy() {
		return Arrays.copyOf(sampleMap, len);
	}

	public ArrayList<int[]> getCoordinates() {
		return this.coords;
	}
	
	public ArrayList<int[]> getCoordinatesCopy() {
		ArrayList<int[]> coordsCopy = new ArrayList<int[]>(len);
		for (int[] coord: this.coords) {
			coordsCopy.add(coord);
		}
		return coordsCopy;
	}	
		

}
